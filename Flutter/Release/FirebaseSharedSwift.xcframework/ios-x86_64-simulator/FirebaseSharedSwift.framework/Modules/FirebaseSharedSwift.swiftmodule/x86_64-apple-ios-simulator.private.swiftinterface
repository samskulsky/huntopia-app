// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios16.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name FirebaseSharedSwift
@_exported import FirebaseSharedSwift
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol StructureCodingPassthroughTypeResolver {
  static func isPassthroughType<T>(_ t: T) -> Swift.Bool
}
public protocol StructureCodingUncodedUnkeyed {
}
public class FirebaseDataEncoder {
  public enum DateEncodingStrategy {
    case deferredToDate
    case secondsSince1970
    case millisecondsSince1970
    @available(macOS 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
    case iso8601
    case formatted(Foundation.DateFormatter)
    case custom((Foundation.Date, any Swift.Encoder) throws -> Swift.Void)
  }
  public enum DataEncodingStrategy {
    case deferredToData
    case base64
    case blob
    case custom((Foundation.Data, any Swift.Encoder) throws -> Swift.Void)
  }
  public enum NonConformingFloatEncodingStrategy {
    case `throw`
    case convertToString(positiveInfinity: Swift.String, negativeInfinity: Swift.String, nan: Swift.String)
  }
  public enum KeyEncodingStrategy {
    case useDefaultKeys
    case convertToSnakeCase
    case custom((_ codingPath: [any Swift.CodingKey]) -> any Swift.CodingKey)
  }
  open var dateEncodingStrategy: FirebaseSharedSwift.FirebaseDataEncoder.DateEncodingStrategy
  open var dataEncodingStrategy: FirebaseSharedSwift.FirebaseDataEncoder.DataEncodingStrategy
  open var nonConformingFloatEncodingStrategy: FirebaseSharedSwift.FirebaseDataEncoder.NonConformingFloatEncodingStrategy
  open var keyEncodingStrategy: FirebaseSharedSwift.FirebaseDataEncoder.KeyEncodingStrategy
  open var passthroughTypeResolver: any FirebaseSharedSwift.StructureCodingPassthroughTypeResolver.Type
  open var userInfo: [Swift.CodingUserInfoKey : Any]
  public init()
  open func encode<T>(_ value: T) throws -> Any where T : Swift.Encodable
  @objc deinit
}
public class FirebaseDataDecoder {
  public enum DateDecodingStrategy {
    case deferredToDate
    case secondsSince1970
    case millisecondsSince1970
    @available(macOS 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
    case iso8601
    case formatted(Foundation.DateFormatter)
    case custom((_ decoder: any Swift.Decoder) throws -> Foundation.Date)
  }
  public enum DataDecodingStrategy {
    case deferredToData
    case base64
    case blob
    case custom((_ decoder: any Swift.Decoder) throws -> Foundation.Data)
  }
  public enum NonConformingFloatDecodingStrategy {
    case `throw`
    case convertFromString(positiveInfinity: Swift.String, negativeInfinity: Swift.String, nan: Swift.String)
  }
  public enum KeyDecodingStrategy {
    case useDefaultKeys
    case convertFromSnakeCase
    case custom((_ codingPath: [any Swift.CodingKey]) -> any Swift.CodingKey)
  }
  open var dateDecodingStrategy: FirebaseSharedSwift.FirebaseDataDecoder.DateDecodingStrategy
  open var dataDecodingStrategy: FirebaseSharedSwift.FirebaseDataDecoder.DataDecodingStrategy
  open var nonConformingFloatDecodingStrategy: FirebaseSharedSwift.FirebaseDataDecoder.NonConformingFloatDecodingStrategy
  open var keyDecodingStrategy: FirebaseSharedSwift.FirebaseDataDecoder.KeyDecodingStrategy
  open var passthroughTypeResolver: any FirebaseSharedSwift.StructureCodingPassthroughTypeResolver.Type
  open var userInfo: [Swift.CodingUserInfoKey : Any]
  public init()
  open func decode<T>(_ type: T.Type, from structure: Any) throws -> T where T : Swift.Decodable
  @objc deinit
}
public protocol FirebaseRemoteConfigValueDecoding {
  func numberValue() -> Foundation.NSNumber
  func boolValue() -> Swift.Bool
  func stringValue() -> Swift.String
  func dataValue() -> Foundation.Data
  func arrayValue() -> [Swift.AnyHashable]?
  func dictionaryValue() -> [Swift.String : Swift.AnyHashable]?
}
